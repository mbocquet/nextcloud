---
# tasks file for nextcloud
- name: "dependencies"
  package:
    name: "{{ nextcloud_dependencies }}"
  notify: php-fpm restart
  tags:
    - nextcloud
    - deps
    - dependencies
    - packages

- name: "check index.html"
  stat:
    path: '{{ nextcloud_webroot }}/index.html'
  register: index
  tags:
    - nextcloud
    - index

- name: "check config.php"
  stat:
    path: '{{ nextcloud_webroot }}/config/config.php'
  register: config
  tags:
    - nextcloud
    - config.php

- name: "webroot folder"
  file:
    path: '{{ nextcloud_webroot_prefix }}'
    state: directory
  tags:
    - nextcloud
    - folder

- name: "check webroot folder"
  stat:
    path: '{{ nextcloud_webroot_prefix }}'
  register: webroot
  tags:
    - nextcloud
    - folder

- name: "temp folder"
  tempfile:
    state: directory
    prefix: "{{ role_name }}"
  register: extract_folder
  when:
    - not ansible_check_mode
    - not index.stat.exists
  tags:
    - nextcloud
    - tempfile

- name: "unarchive in temp folder"
  unarchive:
    remote_src: true
    src: "https://download.nextcloud.com/server/releases/{{ nextcloud_version | default ('latest.tar.bz2') }}"
    dest: "{{ extract_folder.path }}"
    owner: '{{ nextcloud_user }}'
    group: '{{ nextcloud_group }}'
  register: unarchive
  when:
    - not ansible_check_mode
    - webroot.stat.exists
    - not index.stat.exists
  tags:
    - nextcloud
    - download
    - unarchive

- name: "move folder to destination"
  copy:
    remote_src: true
    src: "{{ extract_folder.path }}/nextcloud/"
    dest: "{{ nextcloud_webroot }}"
    owner: '{{ nextcloud_user }}'
    group: '{{ nextcloud_group }}'
  register: move
  when:
    - not ansible_check_mode
    - not index.stat.exists
    - unarchive is succeeded
  tags:
    - nextcloud
    - tempfile
    - move

- name: "delete temp folder"
  file:
    path: "{{ extract_folder.path }}"
    state: absent
  when:
    - not ansible_check_mode
    - extract_folder.path is defined
  tags:
    - nextcloud
    - tempfile

- name: "cronjob"
  cron:
    name: "{{ nextcloud_instance }}"
    minute: "*/{{ nextcloud_cron_frequency_min | default ('5') }}"
    job: 'php -f {{ nextcloud_webroot }}/cron.php'
    user: '{{ nextcloud_user }}'
  tags:
    - nextcloud
    - cron

- name: "php-fpm opcache settings"
  template:
    src: php-fpm-conf.ini.j2
    dest: "/etc/php/{{ php_version | default('7.3') }}/fpm/conf.d/30-nextcloud.ini"
  notify: php-fpm restart
  tags:
    - nextcloud
    - php
    - opcache

- name: "config.php : local memcache"
  lineinfile:
    path: '{{ nextcloud_webroot }}/config/config.php'
    regexp: 'memcache.local'
    line: "  'memcache.local' => 'OC\\\\Memcache\\\\APCu',"
    insertbefore: '^\);$'
    backup: true
  when:
    - config.stat.exists
  tags:
    - nextcloud
    - config.php
    - local
    - memcache

- name: "config.php : filesystem check changes"
  lineinfile:
    path: '{{ nextcloud_webroot }}/config/config.php'
    regexp: 'filesystem_check_changes'
    line: "  'filesystem_check_changes' => {{ nextcloud_fs_check_changes }},"
    insertbefore: '^\);$'
    backup: true
  when:
    - config.stat.exists
    - nextcloud_fs_check_changes is defined
    - nextcloud_fs_check_changes in [ 0, 1 ]
  tags:
    - nextcloud
    - config.php
    - local
    - check
    - changes

- name: "datadirectory"
  file:
    path: '{{ nextcloud_datadirectory }}'
    state: directory
    owner: '{{ nextcloud_user }}'
    group: '{{ nextcloud_group }}'
    mode: 02770
  when:
    - nextcloud_datadirectory is defined
  tags:
    - nextcloud
    - datadirectory

- name: "config.php : datadirectory"
  lineinfile:
    path: '{{ nextcloud_webroot }}/config/config.php'
    regexp: 'datadirectory'
    line: "  'datadirectory' => '{{ nextcloud_datadirectory }}',"
    insertbefore: '^\);$'
    backup: true
  when:
    - config.stat.exists
    - nextcloud_datadirectory is defined
  tags:
    - nextcloud
    - config.php
    - datadirectory

- name: "config.php : trash bin"
  lineinfile:
    path: '{{ nextcloud_webroot }}/config/config.php'
    regexp: 'trashbin_retention_obligation'
    line: "  'trashbin_retention_obligation' => '{{ nextcloud_trashbin_retention_obligation }}',"
    insertbefore: '^\);$'
    backup: true
  when:
    - config.stat.exists
    - nextcloud_trashbin_retention_obligation is defined
  tags:
    - nextcloud
    - config.php
    - trashbin
